import pandas as pd
from pymysql import converters
import pymysql
from datetime import timedelta
from mysql_config import *


def add_to_cache(data, conn, curr):
    query = """
    INSERT INTO `Cache`
    (
        `timestamp`,
        `player_count`
    )
    VALUES
    (
        %(timestamp)s,
        %(player_count)s
    );
    """
    for row in data:
        curr.execute(query, row)
    return "Success"


def get_data_from_hour(hour_timestamp, conn, curr, should_add_to_cache: bool) -> list:

    start = hour_timestamp.isoformat()
    end = (hour_timestamp.replace(microsecond=0, second=0,
           minute=0) + timedelta(hours=1)).isoformat()

    # fstring not safe, but ok since generated by us
    query = f"""
    SELECT `timestamp`, `player_count`
    FROM `Cache`
    WHERE `timestamp` > "{start}"
    AND `timestamp` < "{end}"
    AND `player_count` < 5000000
    ORDER BY `timestamp` DESC;
    """
    curr.execute(query)
    output = [dict(row) for row in curr.fetchall()]

    # cache hit
    if len(output) != 0:
        return output

    # cache miss
    # fetch from big boy database
    query = f"""
    SELECT `timestamp`, `player_count`
    FROM `Monke`
    WHERE `timestamp` > '{start}'
    AND `player_count` < 5000000
    AND `timestamp` < '{end}'
    ORDER BY `timestamp` DESC;
    """
    curr.execute(query)
    output = [dict(row) for row in curr.fetchall()]

    if len(output) == 0:
        return output

    df = pd.DataFrame(output)
    df.columns = ['timestamp', 'player_count']
    df['player_count'] = pd.to_numeric(df['player_count'], errors='coerce')
    df = df.dropna()
    df = df.astype({'player_count': 'int32'})
    length = 500
    df['player_count'] = df['player_count'].rolling(
        int(length + 1)).median().shift(int(-length/2))
    for i in range(0, 2):
        df = df[df['player_count'] > df['player_count'].shift(-1) - 100]
        df = df[df['player_count'] < df['player_count'].shift(-1) + 100]
    output = df.to_dict('records')

    output = output[::max(1, int(len(output)/30))]

    if should_add_to_cache:
        add_to_cache(output, conn, curr)

    return output


def connectToDB():

    conv = converters.conversions.copy()
    conv[246] = float    # convert decimals to floats
    conn = pymysql.connect(
        host=MYSQL_DATABASE_HOST,
        user=MYSQL_DATABASE_USER,
        password=MYSQL_DATABASE_PASSWORD,
        db=MYSQL_DATABASE_DB,
        cursorclass=pymysql.cursors.DictCursor,
        conv=conv
    )
    curr = conn.cursor()

    return conn, curr
